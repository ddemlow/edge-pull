---
- name: HyperCore Runtime Playbook -  automatically run by ansible-pull across edge fleet
# inside "runner" vm deploys simple docker container plus a docker compose configuration
  hosts: localhost
  # roles: # these result in api calls / logins to every cluster at cron interval - 5 min
  # - media_library
  # - netboot_vm
  vars:
    demo_state: present  # absent or present
  environment:  # if set here - hypercore modules will automatically use this for each remote cluster - avoiding need to specify cluster_instance for each test
    SC_TIMEOUT: 2000000
    ANSIBLE_DEPRECATION_WARNINGS: false

  connection: ansible.builtin.local
  gather_facts: True

tasks:

  - name: Count running Docker containers`
    ansible.builtin.shell: "docker ps -q | wc -l"
    register: docker_container_count
    become: true
    changed_when: false

  - name: Gather information about all running containers
    ansible.builtin.shell: |
      docker ps --format '{{ "{{" }}.Names{{ "}}" }}' | awk '{print $$0}'
#      docker ps --format '{{ "{{" }}.Names{{ "}}" }}: {{ "{{" }}.Ports{{ "}}" }}' | awk '{printf "%s, ", $$0}' | sed 's/, $$//'
    register: docker_ps
    become: true
    changed_when: false
  
  - name: Print Docker container list (running)
    ansible.builtin.debug:
      msg: "Container count: {{ docker_container_count.stdout }} List: {{ docker_ps.stdout_lines }} at {{ ansible_date_time.time }}"

  - name: vm update description with timestamp, container count and list 
    scale_computing.hypercore.vm_params:
      vm_name: "{{ ansible_hostname }}"
      description: "Count:{{ docker_container_count.stdout }} @{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}GMT {{ docker_ps.stdout_lines }}"

