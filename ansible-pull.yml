# ansible-pull runner setup
#
# on remote hosts, set up ansible to run periodically using the latest code
# from a particular checkout, in pull based fashion, inverting Ansible's
# usual push-based operating mode.
#
# This particular pull based mode is ideal for:
#
# (A) massive scale out
# (B) continual system remediation
#
# DO NOT RUN THIS AGAINST YOUR HOSTS WITHOUT CHANGING THE repo_url
# TO SOMETHING YOU HAVE PERSONALLY VERIFIED
#
---
- hosts: all
  remote_user: ubuntu
#  become: yes

  vars:
    clusterip: 10.100.20.25    #"{{ inventory_hostname }}"
    ansible_ssh_extra_args: "-o IdentitiesOnly=yes"
    ansible_ssh_private_key_file: ~/.ssh/github.pub
    ansible_ssh_user: ubuntu
    _minute_: "*/05"
    _hour_: 0
    # User to run ansible-pull as from cron
    cron_user: ubuntu
    # File that ansible will use for logs
    logfile: /tmp/ansible-pull.log
    # Directory to where repository will be cloned
    workdir: /var/lib/ansible/local

    # Repository to check out -- YOU MUST CHANGE THIS
    # repo must contain a local.yml file at top level
    repo_url: https://github.com/ddemlow/edge-pull.git

  tasks:

    - name: Add environment variables to /etc/environmenti #TODO - need to create /clusterip.txt with all credentials on setup
      lineinfile:
        path: /etc/environment
        line: "{{ item }}"
        state: present
      become: yes
      loop:
        - 'clusterip="{{ clusterip }}"'
        - 'SC_HOST="https://{{ clusterip }}"'  #this works when executing ansible-pull directly on SCEL host
        - 'SC_USERNAME="ansible"'
        - 'SC_PASSWORD="ComplexPassword1234ans"'
#TODO - above requires reboot to set systemwide environment

    - name: add ansible apt repo #need latest upstream ansible
      ansible.builtin.apt_repository:
        repo: ppa:ansible/ansible
        state: present
      become: true

    - name: update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 86400
      become: true
    
    - name: Install ansible and docker 
      become: true
      ansible.builtin.package:
        name:
          - ansible
          - docker
          - docker-compose
        state: latest
    
    - name: Install the scale_computing.hypercore collection
      ansible.builtin.command:
        cmd: ansible-galaxy collection install scale_computing.hypercore
      register: result
      failed_when:
        - result.rc != 0
        - '"already installed" not in result.stdout'
      changed_when: '"installed" in result.stdout'
      tags:
        - install_collection

    - name: Install the docker  collection
      ansible.builtin.command:
        cmd: ansible-galaxy collection install community.docker
      register: result
      failed_when:
        - result.rc != 0
        - '"already installed" not in result.stdout'
      changed_when: '"installed" in result.stdout'
      tags:
        - install_collection
    
    - name: Create local directory to work from
      become: true
      file: path={{ workdir }} state=directory owner=root group=root mode=0751

# should be able to use localhost and execute against single hypercore cluster - use cloud-init to create file setting ip for cluster
    # - name: Copy ansible inventory file to from /clusterip.txt to /etc/ansible/hosts
    #   ansible.builtin.copy:
    #     remote_src: true
    #     src:  /clusterip.txt
    #     dest: '{{workdir}}/inventory'
    #     owner: root
    #     group: root
    #     mode: u=rw,g=r,o=r
    #   become: true

    - name: Create crontab entry to run ansible-pull against repo_url every "{{ _hour_ }}" hour and "{{ _minutes_ }}" minutes
      ansible.builtin.cron:
        name: ansible-pull
        job: /usr/bin/ansible-pull -U "{{ repo_url }}" >> "{{ logfile }}" 2>&1
        user: "{{ cron_user }}"
        minute: "{{ _minute_ }}"
#        hour: "{{ _hour_ }}"
        state: present
      become: true

# may want to use -f, --forceÔÉÅ run the playbook even if the repository could not be updated
# could add -v (vvv) for verbose logging
    
    # - name: Create logrotate entry for ansible-pull.log
    #   become: true
    #   template: src=templates/etc_logrotate.d_ansible-pull.j2 dest=/etc/logrotate.d/ansible-pull owner=root group=root mode=0644
