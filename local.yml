---
- name: HyperCore Runtime Playbook -  automatically run by ansible-pull across edge fleet 
# inside "runner" vm deploys simple docker container plus a docker compose configuration
# TODO - some locking to see if previous ansible pull is done 
  hosts: localhost
  roles:
  - media_library
  - netboot_vm
  vars:
    vmname: pull-tinycore
    # image_path: /tmp
    # image_url:
    #   - "https://github.com/ddemlow/RestAPIExamples/raw/master/ubuntu20_04-cloud-init/ubuntu20cloudimage.qcow2"
    #   - "https://github.com/ddemlow/RestAPIExamples/raw/master/RHEL9/RHEL9-disk.qcow2"
    # image_filename: "{{ image_url[0] | split('/') | last }}"  # only works for first in list
  environment:  # if set here - hypercore modules will automatically use this for each remote cluster - avoiding need to specify cluster_instance for each test
    SC_TIMEOUT: 2000000
    ANSIBLE_DEPRECATION_WARNINGS: false

  connection: ansible.builtin.local
  gather_facts: True

  pre_tasks:
  - name: Manage pgAdmin4 container state and version
    community.docker.docker_container:
      name: pgadmin4_demo
      image: dpage/pgadmin4:7.8
      state: absent #started
      ports:
        - "3080:80"
        - "443:3443"
      env:
        PGADMIN_DEFAULT_EMAIL: "admin@example.com"
        PGADMIN_DEFAULT_PASSWORD: "admin"
    become: yes

  - name: include playbook deploy_edgesecurity.yml #include file should have only tasks - not full playbook
    ansible.builtin.include_tasks:
      file: deploy_edgesecurity.yml

  - name: Manage wordpress application using Docker Compose values in playbook
    community.docker.docker_compose:
      project_name: wordpress
      definition:
        version: '3.3'

        services:
          db:
            image: mysql:5.7
            volumes:
              - db_data:/var/lib/mysql
            environment:
              MYSQL_ROOT_PASSWORD: somewordpress
              MYSQL_DATABASE: wordpress
              MYSQL_USER: wordpress
              MYSQL_PASSWORD: wordpress
          wordpress:
            depends_on:
              - db
            image: wordpress:latest
            ports:
              - "4080:80"
            environment:
              WORDPRESS_DB_HOST: db:3306
              WORDPRESS_DB_USER: wordpress
              WORDPRESS_DB_PASSWORD: wordpress
              WORDPRESS_DB_NAME: wordpress

        volumes:
          db_data: {}
      state: absent
    become: yes

  - name: manage opensourcepos application from /opensourcepos/docker-compose.yaml file 
    community.docker.docker_compose:
      project_src: opensourcepos
      state: absent
    become: true
    ignore_errors: true

  - name: manage gitea application from /gitea/docker-compose.yaml file gitea 
    community.docker.docker_compose:
      project_src: gitea
      state: absent
    become: true
    ignore_errors: true

  post_tasks:
  - name: Gather information about all running containers
    ansible.builtin.command:  "docker ps --format 'table {{ '{{' }}.Names{{ '}}' }}\t{{ '{{' }}.Ports{{ '}}' }}'" # docker ps --format "{{ '{{' }} .Names {{ '}}' }}"
    register: docker_ps
    become: true
    changed_when: false

  - name: Print Docker container list (running)
    ansible.builtin.debug:
      var: docker_ps.stdout_lines

#TODO - could update tags on runner VM - based on UUID to include container__{{name}}
# every runner should have env variables with credentials for the cluster it's on ... and host uuid should be the VM uuid 

  - name: Last update time (UTC)
    ansible.builtin.debug:
      msg: "{{ ansible_date_time.time }}" # "{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}"

  # - name: Get info on docker host and list containers
  #   community.docker.docker_host_info:
  #     containers: true
  #   register: result
  #   become: true

  # - name: Print Docker container list
  #   debug:
  #     msg: "{{ item.Names }}"
  #   loop: "{{ result.containers | from_yaml_all | list }}"
  #   changed_when: false



