---
- name: HyperCore Runtime Playbook -  automatically run by ansible-pull across edge fleet 
# inside "runner" vm deploys simple docker container plus a docker compose configuration
# TODO - some locking to see if previous ansible pull is done 
  hosts: localhost
  # roles:
  # - media_library
  # - netboot_vm
  vars:
    demo_state: present # absent or present 
  environment:  # if set here - hypercore modules will automatically use this for each remote cluster - avoiding need to specify cluster_instance for each test
    SC_TIMEOUT: 2000000
    ANSIBLE_DEPRECATION_WARNINGS: false

  connection: ansible.builtin.local
  gather_facts: True

  pre_tasks:
  - name: Manage wordpress application using Docker Compose values in playbook
    community.docker.docker_compose:
      project_name: wordpress
      definition:
        version: '3.3'

        services:
          db:
            image: mysql:5.7
            volumes:
              - db_data:/var/lib/mysql
            environment:
              MYSQL_ROOT_PASSWORD: somewordpress
              MYSQL_DATABASE: wordpress
              MYSQL_USER: wordpress
              MYSQL_PASSWORD: wordpress
          wordpress:
            depends_on:
              - db
            image: wordpress:latest
            ports:
              - "4080:80"
            environment:
              WORDPRESS_DB_HOST: db:3306
              WORDPRESS_DB_USER: wordpress
              WORDPRESS_DB_PASSWORD: wordpress
              WORDPRESS_DB_NAME: wordpress

        volumes:
          db_data: {}
      state: "{{ demo_state }}"
    become: yes
    register: wordpress_result

  - name: manage gitea application from /gitea/docker-compose.yaml file gitea 
    community.docker.docker_compose:
      project_src: gitea
      state: "{{ demo_state }}"
    become: true
    ignore_errors: true
    register: gitea_result

  # - name: manage opensourcepos application from /opensourcepos/docker-compose.yaml file 
  #   community.docker.docker_compose:
  #     project_src: opensourcepos
  #     state: absent
  #   become: true
  #   ignore_errors: true

  - name: Manage pgAdmin4 container state and version
    community.docker.docker_container:
      name: pgadmin4_demo
      image: dpage/pgadmin4:7.8
      state: absent #started
      ports:
        - "3080:80"
        - "443:3443"
      env:
        PGADMIN_DEFAULT_EMAIL: "admin@example.com"
        PGADMIN_DEFAULT_PASSWORD: "admin"
    become: yes    
    register: pgadmin4_result

  # - name: include playbook deploy_edgesecurity.yml #include file should have only tasks - not full playbook
  #   ansible.builtin.include_tasks:
  #     file: deploy_edgesecurity_container.yml
  #   register: edgesecurity_result    

  - name: include playbook portainer agent  #include file should have only tasks - not full playbook
    ansible.builtin.include_tasks:
      file: portainer-agent.yaml
#    register: portainer_result

  post_tasks:
  - name: Set flag if any task has changed
    ansible.builtin.set_fact:
      any_change: "{{ wordpress_result.changed or gitea_result.changed or pgadmin4_result.changed or edgesecurity_result.changed or portainer_result.changed or portainer2_result.changed }}"
    when:
      - wordpress_result is defined
      - gitea_result is defined
      - pgadmin4_result is defined
      - edgesecurity_result is defined
      - portainer_result is defined
      - portainer2_result is defined

  - name: Count running Docker containers`
    ansible.builtin.shell: "docker ps -q | wc -l"
    register: docker_container_count
    become: true
    changed_when: false

  - name: Gather information about all running containers
    ansible.builtin.shell: |
      docker ps --format '{{ "{{" }}.Names{{ "}}" }}' | awk '{print $$0}'
#      docker ps --format '{{ "{{" }}.Names{{ "}}" }}: {{ "{{" }}.Ports{{ "}}" }}' | awk '{printf "%s, ", $$0}' | sed 's/, $$//'
    register: docker_ps
    become: true
    changed_when: false
  
  - name: Print Docker container list (running)
    ansible.builtin.debug:
      msg: "Container count: {{ docker_container_count.stdout }} List: {{ docker_ps.stdout_lines }} at {{ ansible_date_time.time }}"

#TODO - could update tags on runner VM - based on UUID to include container__{{name}}
# every runner should have env variables with credentials for the cluster it's on ... and host uuid should be the VM uuid 

  # - name: Last update time (UTC)
  #   ansible.builtin.debug:
  #     msg: "{{ ansible_date_time.time }}" 

  - name: vm update description with timestamp, container count and list 
    scale_computing.hypercore.vm_params:
      vm_name: "{{ ansible_hostname }}"
      description: "Count:{{ docker_container_count.stdout }} @{{ ansible_date_time.hour }}:{{ ansible_date_time.minute }}GMT {{ docker_ps.stdout_lines }}"
    changed_when: false
    when: any_change | default(false) or ansible_date_time.minute | int < 5
